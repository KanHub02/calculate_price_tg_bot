from config import logger
from aiogram.utils.markdown import text, bold, escape_md


def format_ff_response(data):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç.

    :param data: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.
    :return: —Å—Ç—Ä–æ–∫–∞ —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.
    """
    logger.info(data)
    if isinstance(data, dict):
        formatted_response = text(
            bold("üõí –¢–æ–≤–∞—Ä:") + f" {escape_md(data['product_title'])}",
            bold("üì¶ –ö–æ–ª-–≤–æ:") + f" {escape_md(str(data['quantity']))}",
            bold("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—Ä–∞–∫:")
            + f" {'–î–∞' if data.get('check_defects_title') else '–ù–µ—Ç'}",
            bold("üè∑ –í–∏–¥ –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∏:")
            + f" {'–î–∞' if data.get('marking_type_title') else '–ù–µ—Ç'}",
            bold("‚úÖ –ß–µ—Å—Ç–Ω—ã–π –∑–Ω–∞–∫:") + f" {'–î–∞' if data.get('honest_sign') else '–ù–µ—Ç'}",
            bold("üì¶ –£–ø–∞–∫–æ–≤–∫–∞:") + f" {'–î–∞' if data.get('package_title') else '–ù–µ—Ç'}",
            bold("üìè –í–∏–¥ –£–ø–∞–∫–æ–≤–∫–∏:")
            + f" {'–î–∞' if data.get('packaging_size') else '–ù–µ—Ç'}",
            bold("üè∑ –ë–∏—Ä–∫–æ–≤–∞–Ω–∏–µ:") + f" {'–î–∞' if data.get('need_taging') else '–ù–µ—Ç'}",
            bold("üìé –í–ª–æ–∂–µ–Ω–∏—è:") + f" {'–î–∞' if data.get('need_attachment') else '–ù–µ—Ç'}",
            bold("üì¶ –ö–æ–ª-–≤–æ –∫–æ—Ä–æ–±–æ–≤:") + f" {escape_md(str(data['count_of_boxes']))}",
            "",
            bold("üí∞ –¶–µ–Ω–∞ —Ä–∞–±–æ—Ç—ã —Ñ—Ñ –Ω–∞ 1 –µ–¥–∏–Ω–∏—Ü—É:")
            + f" {escape_md(str(data['per_price_ff']))}",
            bold("üí∞ –¶–µ–Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ 1 –µ–¥:")
            + f" {escape_md(str(data['per_price_material']))}",
            bold("üí∞ –¶–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–∞ –Ω–∞ 1 –µ–¥–∏–Ω–∏—Ü—É:")
            + f" {escape_md(str(data['per_price_transit']))}",
            sep="\n",
        )
        return formatted_response
    else:
        return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫"


def format_logistic_request(data):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç.
    :param data: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.
    :return: —Å—Ç—Ä–æ–∫–∞ —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.
    """
    logger.info(data)

    express_price = round(float(data.get("–ò—Ç–æ–≥–æ Express", 0)), 2)
    standard_price = round(float(data.get("–ò—Ç–æ–≥–æ Standart", 0)), 2)
    packaging_cost = round(float(data.get("–£–ø–∞–∫–æ–≤–∫–∞", 0)), 2)
    insurance_cost = round(float(data.get("–°—Ç—Ä–∞—Ö–æ–≤–∫–∞", 0)), 2)
    weight = round(float(data.get("–í–µ—Å", 0)), 2)
    volume = round(float(data.get("–ö—É–±", 0)), 2)

    formatted_response = text(
        bold("üì¶ –í–∏–¥ —Ç–æ–≤–∞—Ä–∞:") + f" {escape_md(data.get('–í–∏–¥ —Ç–æ–≤–∞—Ä–∞', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}",
        bold("‚öñÔ∏è –í–µ—Å:") + f" {weight} –∫–≥",
        bold("üìè –ö—É–±:") + f" {volume} –∫—É–±. –º",
        bold("üì¶ –£–ø–∞–∫–æ–≤–∫–∞:") + f" {packaging_cost} ¬•",
        bold("üí∞ –°—Ç—Ä–∞—Ö–æ–≤–∫–∞:") + f" {insurance_cost} $",
        "",
        bold("üöÄ Express:") + f" {express_price} $",
        bold("üöö Standart:") + f" {standard_price} $",
        "",
        bold("–ò—Ç–æ–≥–æ Express:")
        + f" {express_price + packaging_cost + insurance_cost} $",
        bold("–ò—Ç–æ–≥–æ Standart:")
        + f" {standard_price + packaging_cost + insurance_cost} $",
        sep="\n",
    )

    return formatted_response


def is_float(value):
    try:
        float(value)
        return True
    except ValueError:
        return False


async def is_not_empty(data, state):
    await state.finish()
    return bool(data)
